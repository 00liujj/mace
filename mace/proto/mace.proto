syntax = "proto2";

package mace;

enum NetMode {
  INIT   = 0;
  NORMAL = 1;
}

enum DeviceType {
  CPU    = 0;                    // In default, we will use CPU.
  NEON   = 1;
  OPENCL = 2;
}

enum DataType {
  DT_INVALID = 0;

  // Data types that all computation devices are expected to be
  // capable to support.
  DT_FLOAT = 1;
  DT_DOUBLE = 2;
  DT_INT32 = 3;
  DT_UINT8 = 4;
  DT_INT16 = 5;
  DT_INT8 = 6;
  DT_STRING = 7;
  DT_INT64 = 8;
  DT_UINT16 = 9;
  DT_BOOL = 10;
  DT_HALF = 19;
  DT_UINT32 = 22;
}

message TensorProto {
  // The dimensions in the tensor.
  repeated int64 dims = 1;
  optional DataType data_type = 2 [default = DT_FLOAT];
  // For float
  repeated float float_data = 3 [packed = true];
  // For int32, uint8, int8, uint16, int16, bool, and float16
  // Note about float16: in storage we will basically convert float16 byte-wise
  // to unsigned short and then store them in the int32_data field.
  repeated int32 int32_data = 4 [packed = true];
  // For bytes
  optional bytes byte_data = 5;
  // For strings
  repeated bytes string_data = 6;
  // For double
  repeated double double_data = 9 [packed = true];
  // For int64
  repeated int64 int64_data = 10 [packed = true];
  // Optionally, a name for the tensor.
  optional string name = 7;

  optional uint32 node_id = 100;
}

message Argument {
  optional string name = 1;
  optional float f = 2;
  optional int64 i = 3;
  optional bytes s = 4;
  repeated float floats = 5;
  repeated int64 ints = 6;
  repeated bytes strings = 7;
}

// for hexagon mace-nnlib
message NodeInput {
  optional int32 node_id = 1;
  optional int32 output_port = 2;
}

message OutputShape {
  repeated int64 dims = 1;
}

message OperatorDef {
  repeated string input = 1;
  repeated string output = 2;
  optional string name = 3;
  optional string type = 4;
  repeated Argument arg = 5;
  repeated OutputShape output_shape = 6;
  repeated DataType output_type = 7;

  // Memory optimization: only support one single output op
  optional int32 mem_id = 10 [default = -1];

  // for hexagon mace-nnlib
  optional uint32 node_id = 100;
  optional uint32 op_id = 101;
  optional uint32 padding = 102;
  repeated NodeInput node_input = 103;
}

// for memory optimization
message MemoryBlock {
  optional int32 mem_id = 1;
  optional uint32 x = 2;
  optional uint32 y = 3;
}
message MemoryArena {
  repeated MemoryBlock mem_block = 1;
}

// for hexagon mace-nnlib
message InputInfo {
  optional string name = 1;
  optional int32 node_id = 2;
  repeated int32 dims = 3;
  optional int32 max_byte_size = 4; // only support 32-bit len
  optional DataType data_type = 5 [default = DT_FLOAT];
}
message OutputInfo {
  optional string name = 1;
  optional int32 node_id = 2;
  repeated int32 dims = 3;
  optional int32 max_byte_size = 4; // only support 32-bit len
  optional DataType data_type = 5 [default = DT_FLOAT];
}

message NetDef {
  optional string name = 1;
  repeated OperatorDef op = 2;
  optional string version = 3;
  repeated Argument arg = 4;
  repeated TensorProto tensors = 5;

  // for mem optimization
  optional MemoryArena mem_arena = 10;

  // for hexagon mace-nnlib
  repeated InputInfo input_info = 100;
  repeated OutputInfo output_info = 101;
}

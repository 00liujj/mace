//
// Copyright (c) 2017 XiaoMi All rights reserved.
// Generated by the mace converter.  DO NOT EDIT!
//

{% if mode == 0 %}
#include <vector>
#include "mace/core/public/mace.h"

namespace {{tag}}{

alignas(4) unsigned char {{ tensor_info.name }}[] = {
{% for d in tensor_info.data %}{{"0x%02X, " % d }}{%endfor%}
};

void Create{{tensor.name}}(std::vector<mace::ConstTensor> &tensors) {
  tensors.emplace_back(mace::ConstTensor(
      {{ tensor.name|tojson }}, {{ tensor.name }},
      { {{ tensor.dims|join(', ') }} }, {{ tensor.data_type }}, {{ tensor.node_id }}));
}

} //  namespace {{tag}}

{% elif mode == 1 %}
#include <vector>
#include <string>
#include "mace/core/public/mace.h"

namespace {
static void UpdateOp(mace::OperatorDef &op,
                     const std::string &name,
                     const std::string &type,
                     const std::vector<std::string> &inputs,
                     const std::vector<std::string> &outputs,
                     const std::vector<mace::DataType> &output_types) {
  op.set_name(name);
  op.set_type(type);
  op.set_input(inputs);
  op.set_output(outputs);
  op.set_output_type(output_types);
}
}

namespace {{tag}}{

{% for i in range(start, end) %}

void CreateOperator{{i}}(mace::OperatorDef &op) {
  mace::Argument *arg = nullptr;
  {% for arg in net.op[i].arg %}

  arg = op.add_arg();
  arg->set_name({{ arg.name|tojson }});

  {%- if arg.HasField('f') %}
  arg->set_f({{ arg.f }});
  {%- endif %}
  {%- if arg.HasField('i') %}
  arg->set_i({{ arg.i }});
  {%- endif %}
  {%- if arg.HasField('s') %}
  arg->set_s({{ arg.s|tojson }});
  {%- endif %}

  {% if arg.floats|length != 0 %}
  arg->set_floats({ {{ arg.floats|join(', ') }} });
  {% endif %}
  {% if arg.ints|length != 0 %}
  arg->set_ints({ {{ arg.ints|join(', ') }} });
  {% endif %}
  {% if arg.strings|length != 0 %}
  arg->set_strings({ {{ arg.strings|stringfy() }} });
  {% endif %}
  {% endfor %}

  {% if net.op[i].HasField('mem_id') %}
  op.set_mem_id({{net.op[i].mem_id}});
  {% endif %}

  {% for shape in net.op[i].output_shape %}
  op.add_output_shape(mace::OutputShape({ {{ shape.dims|join(', ') }} }));
  {% endfor %}

  UpdateOp(op, {{ net.op[i].name|tojson }}, {{ net.op[i].type|tojson}},
          { {{ net.op[i].input|stringfy }} },
          { {{ net.op[i].output|stringfy }} },
          { {{ net.op[i].output_type|join(', ') }} });

}

{% endfor %}

} //  namespace {{tag}}

{% else %}
#include <vector>
#include <string>
#include "mace/core/public/mace.h"

namespace {{tag}} {

{% for tensor in tensors %}
extern void Create{{ tensor.name }}(std::vector<mace::ConstTensor> &tensors);
{% endfor %}


{% for i in range(net.op|length) %}
extern void CreateOperator{{i}}(mace::OperatorDef &op);
{% endfor %}

} //  namespace {{ tag }}


namespace {

{% if net.arg|length != 0 %}
static void CreateNetArg(mace::NetDef &net_def) {
  net_def.mutable_arg().reserve({{ net.arg|length }});
  mace::Argument *arg = nullptr;
  {% for arg in net.arg %}

  arg = net_def.add_arg();
  arg->set_name({{ arg.name|tojson }});

  {%- if arg.HasField('f') %}
  arg->set_f({{ arg.f }});
  {% endif %}

  {%- if arg.HasField('i') %}
  arg->set_i({{ arg.i }});
  {% endif %}

  {%- if arg.HasField('s') %}
  arg->set_s({{ arg.s|tojson }});
  {% endif %}

  {% if arg.floats|length != 0 %}
  arg->set_floats({ {{ arg.floats|join(', ') }} });
  {% endif %}
  {% if arg.ints|length != 0 %}
  arg->set_ints({ {{ arg.ints|join(', ') }} });
  {% endif %}
  {% if arg.strings|length != 0 %}
  arg->set_strings({ {{ arg.strings|stringfy() }} });
  {% endif %}

  {% endfor %}

}
{% endif %}


static void CreateOperators(std::vector<mace::OperatorDef> &ops) {
  ops.resize({{ net.op|length }});
  {% for i in range(net.op|length) %}

  {{tag}}::CreateOperator{{i}}(ops[{{i}}]);
  {% endfor %}

}

static void CreateTensors(std::vector<mace::ConstTensor> &tensors) {
  tensors.reserve({{ net.tensors|length }});

  {% for tensor in net.tensors %}

  {{tag}}::Create{{tensor.name}}(tensors);
  {% endfor %}

}


{% if net.mem_arena.mem_block|length != 0 %}
static void CreateMemoryArena(mace::MemoryArena &mem_arena) {
  std::vector<mace::MemoryBlock> &mem_block = mem_arena.mutable_mem_block();
  mem_block.reserve({{ net.mem_arena.mem_block|length }});

  {% for mem_blk in net.mem_arena.mem_block %}
  mem_block.emplace_back(mace::MemoryBlock({{ mem_blk.mem_id }},
                                           {{mem_blk.x}},
                                           {{mem_blk.y}}));
  {% endfor %}

}
{% endif %}

}

namespace mace {

NetDef {{'Create' + tag}}() {
  NetDef net_def;
  net_def.set_name("{{ net.name}}");
  net_def.set_version("{{ net.version }}");

  {% if net.arg|length != 0 %}
  CreateNetArg(net_def);
  {% endif %}

  CreateOperators(net_def.mutable_op());

  CreateTensors(net_def.mutable_tensors());

  {% if net.mem_arena.mem_block|length != 0 %}
  CreateMemoryArena(net_def.mutable_mem_arena());
  {% endif %}

  return net_def;
}

} //  namespace mace
{% endif %}
